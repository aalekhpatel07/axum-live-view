/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var axum_live_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axum-live-view */ \"../assets/dist/src/live_view.js\");\n/* harmony import */ var axum_live_view__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axum_live_view__WEBPACK_IMPORTED_MODULE_0__);\n\n\nwindow.liveView = new axum_live_view__WEBPACK_IMPORTED_MODULE_0__.LiveView()\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "../assets/dist/src/live_view.js":
/*!***************************************!*\
  !*** ../assets/dist/src/live_view.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LiveView = void 0;\nconst morphdom_1 = __importDefault(__webpack_require__(/*! morphdom */ \"../assets/node_modules/morphdom/dist/morphdom-esm.js\"));\nclass LiveView {\n    constructor() {\n        this.options = {\n            debug: false,\n        };\n        connect(this.options);\n    }\n    enableDebug() {\n        this.options.debug = true;\n    }\n    disableDebug() {\n        this.options.debug = false;\n    }\n}\nexports.LiveView = LiveView;\nfunction connect(options) {\n    if (document.getElementById(\"live-view-container\") === null) {\n        return;\n    }\n    var proto;\n    if (location.protocol.indexOf(\"https\") === -1) {\n        proto = \"ws\";\n    }\n    else {\n        proto = \"wss\";\n    }\n    const socket = new WebSocket(`${proto}://${window.location.host}${window.location.pathname}`);\n    var state = {};\n    socket.addEventListener(\"open\", () => {\n        onOpen(socket, options);\n    });\n    socket.addEventListener(\"message\", (event) => {\n        onMessage(socket, event, state, options);\n    });\n    socket.addEventListener(\"close\", () => {\n        onClose(options);\n    });\n}\nconst pingTimeLabel = \"ping\";\nfunction socketSend(socket, msg, options) {\n    socket.send(JSON.stringify(msg));\n}\nfunction onOpen(socket, options) {\n    setInterval(() => {\n        const msg = { t: \"h\" };\n        if (options.debug) {\n            console.time(pingTimeLabel);\n        }\n        socketSend(socket, msg, options);\n    }, 30 * 1000);\n}\nfunction onMessage(socket, event, state, options) {\n    const msg = JSON.parse(event.data);\n    if (msg.t === \"i\") {\n        state.viewState = msg.d;\n        updateDomFromState(socket, state, options);\n        bindInitialEvents(socket, options);\n    }\n    else if (msg.t === \"r\") {\n        if (!state.viewState) {\n            return;\n        }\n        if (!msg.d) {\n            return;\n        }\n        patchTemplate(state.viewState, msg.d);\n        updateDomFromState(socket, state, options);\n    }\n    else if (msg.t === \"j\") {\n        for (const jsCommand of msg.d) {\n            handleJsCommand(jsCommand);\n        }\n    }\n    else if (msg.t === \"h\") {\n        if (options.debug) {\n            console.timeEnd(pingTimeLabel);\n        }\n    }\n    else {\n        const _ = msg;\n    }\n}\nfunction onClose(options) {\n    setTimeout(() => {\n        connect(options);\n    }, 1000);\n}\nconst axm = {\n    click: \"axm-click\",\n    input: \"axm-input\",\n    change: \"axm-change\",\n    submit: \"axm-submit\",\n    focus: \"axm-focus\",\n    blur: \"axm-blur\",\n    keydown: \"axm-keydown\",\n    keyup: \"axm-keyup\",\n    mouseenter: \"axm-mouseenter\",\n    mouseover: \"axm-mouseover\",\n    mouseleave: \"axm-mouseleave\",\n    mouseout: \"axm-mouseout\",\n    mousemove: \"axm-mousemove\",\n};\nconst axm_file = {\n    progress: \"axm-file-progress\",\n    loadStart: \"axm-file-loadstart\",\n    loadEnd: \"axm-file-loadend\",\n    abort: \"axm-file-abort\",\n    load: \"axm-file-load\",\n};\nconst axm_window = {\n    keydown: \"axm-window-keydown\",\n    keyup: \"axm-window-keyup\",\n    focus: \"axm-window-focus\",\n    blur: \"axm-window-blur\",\n    scroll: \"axm-scroll\",\n};\nfunction listenForFileUploadEvents(node) {\n    if (!node) {\n        return;\n    }\n    if (node.getAttribute(\"type\") !== \"file\") {\n        return;\n    }\n    function dispatchFileEvent(name, event, file, reader) {\n        const fileEvent = new CustomEvent(name, {\n            detail: {\n                lengthComputable: event.lengthComputable,\n                loaded: event.loaded,\n                total: event.total,\n                fileLastModified: file.lastModified,\n                fileName: file.name,\n                fileSize: file.size,\n                fileType: file.type,\n                fileWebkitRelativePath: file.webkitRelativePath,\n                result: reader.result ? reader.result : null,\n                readyState: reader.readyState,\n                error: reader.error\n            },\n        });\n        node.dispatchEvent(fileEvent);\n    }\n    node.addEventListener(\"change\", (_) => {\n        Array\n            .from(node.files)\n            .forEach((file) => {\n            let reader = new FileReader();\n            if (node.hasAttribute(axm_file.progress)) {\n                reader.onprogress = (event) => {\n                    dispatchFileEvent(axm_file.progress, event, file, reader);\n                };\n            }\n            if (node.hasAttribute(axm_file.load)) {\n                reader.onload = (event) => {\n                    dispatchFileEvent(axm_file.load, event, file, reader);\n                };\n            }\n            if (node.hasAttribute(axm_file.loadStart)) {\n                reader.onloadstart = (event) => {\n                    dispatchFileEvent(axm_file.loadStart, event, file, reader);\n                };\n            }\n            if (node.hasAttribute(axm_file.loadEnd)) {\n                reader.onloadend = (event) => {\n                    dispatchFileEvent(axm_file.loadEnd, event, file, reader);\n                };\n            }\n            if (node.hasAttribute(axm_file.abort)) {\n                reader.onabort = (event) => {\n                    dispatchFileEvent(axm_file.abort, event, file, reader);\n                };\n            }\n            reader.readAsText(file);\n        });\n    });\n}\nfunction bindInitialEvents(socket, options) {\n    const attrs = Object.values(axm).map((attr) => `[${attr}]`).join(\", \");\n    document.querySelectorAll(attrs).forEach((element) => {\n        addEventListeners(socket, element, options);\n    });\n}\nfunction addEventListeners(socket, element, options) {\n    if (element.hasAttribute(axm.click)) {\n        on(socket, options, element, element, \"click\", axm.click, (msg) => ({ t: \"click\", m: msg }));\n    }\n    if (element instanceof HTMLInputElement ||\n        element instanceof HTMLTextAreaElement ||\n        element instanceof HTMLSelectElement) {\n        if (element.hasAttribute(axm.input)) {\n            on(socket, options, element, element, \"input\", axm.input, (msg) => {\n                const value = inputValue(element);\n                return { t: \"input\", m: msg, d: { v: value } };\n            });\n        }\n        if (element.hasAttribute(axm.change)) {\n            on(socket, options, element, element, \"change\", axm.change, (msg) => {\n                const value = inputValue(element);\n                return { t: \"input\", m: msg, d: { v: value } };\n            });\n        }\n        if (element.hasAttribute(axm.focus)) {\n            on(socket, options, element, element, \"focus\", axm.focus, (msg) => {\n                const value = inputValue(element);\n                return { t: \"input\", m: msg, d: { v: value } };\n            });\n        }\n        if (element.hasAttribute(axm.blur)) {\n            on(socket, options, element, element, \"blur\", axm.blur, (msg) => {\n                const value = inputValue(element);\n                return { t: \"input\", m: msg, d: { v: value } };\n            });\n        }\n    }\n    if (element instanceof HTMLFormElement) {\n        if (element.hasAttribute(axm.change)) {\n            on(socket, options, element, element, \"change\", axm.change, (msg) => {\n                const form = new FormData(element);\n                const query = new URLSearchParams(form).toString();\n                return { t: \"form\", m: msg, d: { q: query } };\n            });\n        }\n        if (element.hasAttribute(axm.submit)) {\n            on(socket, options, element, element, \"submit\", axm.submit, (msg) => {\n                const form = new FormData(element);\n                const query = new URLSearchParams(form).toString();\n                return { t: \"form\", m: msg, d: { q: query } };\n            });\n        }\n    }\n    [\n        [\"mouseenter\", axm.mouseenter],\n        [\"mouseover\", axm.mouseover],\n        [\"mouseleave\", axm.mouseleave],\n        [\"mouseout\", axm.mouseout],\n        [\"mousemove\", axm.mousemove],\n    ].forEach(([event, axm]) => {\n        if (!event) {\n            return;\n        }\n        if (!axm) {\n            return;\n        }\n        if (element.hasAttribute(axm)) {\n            on(socket, options, element, element, event, axm, (msg, event) => {\n                if (event instanceof MouseEvent) {\n                    const data = {\n                        cx: event.clientX,\n                        cy: event.clientY,\n                        px: event.pageX,\n                        py: event.pageY,\n                        ox: event.offsetX,\n                        oy: event.offsetY,\n                        mx: event.movementX,\n                        my: event.movementY,\n                        sx: event.screenX,\n                        sy: event.screenY,\n                    };\n                    return { t: \"mouse\", m: msg, d: data };\n                }\n                else {\n                    return;\n                }\n            });\n        }\n    });\n    if (element instanceof HTMLInputElement) {\n        if (element.hasAttribute(axm.input) && element.getAttribute(\"type\") === \"file\") {\n            listenForFileUploadEvents(element);\n            Object\n                .values(axm_file)\n                .forEach((axm_file_event) => {\n                on(socket, options, element, element, axm_file_event, axm_file_event, (msg, event) => {\n                    if (event instanceof (CustomEvent)) {\n                        let detail = event.detail;\n                        const data = {\n                            lc: detail.lengthComputable,\n                            t: detail.total,\n                            l: detail.loaded,\n                            flm: detail.fileLastModified,\n                            fs: detail.fileSize,\n                            ft: detail.fileType,\n                            fn: detail.fileName,\n                            fwrp: detail.fileWebkitRelativePath,\n                            r: detail.result,\n                            rs: detail.readyState,\n                            e: detail.error\n                        };\n                        return { t: \"file\", m: msg, d: data };\n                    }\n                    return undefined;\n                });\n            });\n        }\n    }\n    [\n        [\"keydown\", axm.keydown],\n        [\"keyup\", axm.keyup],\n    ].forEach(([event, axm]) => {\n        if (!event) {\n            return;\n        }\n        if (!axm) {\n            return;\n        }\n        if (element.hasAttribute(axm)) {\n            on(socket, options, element, element, event, axm, (msg, event) => {\n                var _a;\n                if (event instanceof KeyboardEvent) {\n                    if (element.hasAttribute(\"axm-key\") &&\n                        ((_a = element === null || element === void 0 ? void 0 : element.getAttribute(\"axm-key\")) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== event.key.toLowerCase()) {\n                        return;\n                    }\n                    const data = {\n                        k: event.key,\n                        kc: event.code,\n                        a: event.altKey,\n                        c: event.ctrlKey,\n                        s: event.shiftKey,\n                        me: event.metaKey,\n                    };\n                    return { t: \"key\", m: msg, d: data };\n                }\n                else {\n                    return;\n                }\n            });\n        }\n    });\n}\nfunction addDocumentEventListeners(socket, element, options) {\n    [\n        [\"keydown\", axm_window.keydown],\n        [\"keyup\", axm_window.keyup],\n    ].forEach(([event, axm]) => {\n        if (!event) {\n            return;\n        }\n        if (!axm) {\n            return;\n        }\n        if (element.hasAttribute(axm)) {\n            on(socket, options, element, document, event, axm, (msg, event) => {\n                var _a;\n                if (event instanceof KeyboardEvent) {\n                    if (element.hasAttribute(\"axm-key\") &&\n                        ((_a = element === null || element === void 0 ? void 0 : element.getAttribute(\"axm-key\")) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== event.key.toLowerCase()) {\n                        return;\n                    }\n                    const data = {\n                        k: event.key,\n                        kc: event.code,\n                        a: event.altKey,\n                        c: event.ctrlKey,\n                        s: event.shiftKey,\n                        me: event.metaKey,\n                    };\n                    return { t: \"key\", m: msg, d: data };\n                }\n                else {\n                    return;\n                }\n            });\n        }\n    });\n    if (element.hasAttribute(axm_window.focus)) {\n        on(socket, options, element, document, \"focus\", axm_window.focus, (msg) => {\n            return { t: \"window_focus\", m: msg };\n        });\n    }\n    if (element.hasAttribute(axm_window.blur)) {\n        on(socket, options, element, document, \"blur\", axm_window.blur, (msg) => {\n            return { t: \"window_blur\", m: msg };\n        });\n    }\n    if (element.hasAttribute(axm_window.scroll)) {\n        on(socket, options, element, document, \"scroll\", axm_window.scroll, (msg) => {\n            const data = {\n                sx: window.scrollX,\n                sy: window.scrollY,\n            };\n            return { t: \"scroll\", m: msg, d: data };\n        });\n    }\n}\nfunction on(socket, options, element, listenForEventOn, eventName, attr, f) {\n    var callback = delayOrThrottle(element, (event) => {\n        if (!(event instanceof KeyboardEvent)) {\n            event.preventDefault();\n        }\n        const decodeMsg = msgAttr(element, attr);\n        if (!decodeMsg) {\n            return;\n        }\n        const payload = f(decodeMsg, event);\n        if (!payload) {\n            return;\n        }\n        socketSend(socket, payload, options);\n    });\n    if (document === listenForEventOn) {\n        documentEventListeners.push({\n            event: eventName,\n            callback: callback,\n        });\n    }\n    listenForEventOn.addEventListener(eventName, callback);\n}\nfunction msgAttr(element, attr) {\n    const value = element.getAttribute(attr);\n    if (!value) {\n        return;\n    }\n    try {\n        return JSON.parse(value);\n    }\n    catch (_a) {\n        return value;\n    }\n}\nfunction delayOrThrottle(element, f) {\n    var delayMs = numberAttr(element, \"axm-debounce\");\n    if (delayMs) {\n        return debounce(f, delayMs);\n    }\n    var delayMs = numberAttr(element, \"axm-throttle\");\n    if (delayMs) {\n        return throttle(f, delayMs);\n    }\n    return f;\n}\nvar documentEventListeners = [];\nfunction inputValue(element) {\n    if (element instanceof HTMLTextAreaElement) {\n        return element.value;\n    }\n    else if (element instanceof HTMLInputElement) {\n        if (element.getAttribute(\"type\") === \"radio\" || element.getAttribute(\"type\") === \"checkbox\") {\n            return element.checked;\n        }\n        else {\n            return element.value;\n        }\n    }\n    else if (element instanceof HTMLSelectElement) {\n        if (element.hasAttribute(\"multiple\")) {\n            return Array.from(element.selectedOptions).map((opt) => opt.value);\n        }\n        else {\n            return element.value;\n        }\n    }\n    else {\n        throw \"Input has no input value\";\n    }\n}\nfunction numberAttr(element, attr) {\n    const value = element.getAttribute(attr);\n    if (value) {\n        const number = parseInt(value, 10);\n        if (number) {\n            return number;\n        }\n    }\n    return null;\n}\nfunction updateDomFromState(socket, state, options) {\n    if (!state.viewState) {\n        return;\n    }\n    const html = buildHtml(state.viewState);\n    const container = document.querySelector(\"#live-view-container\");\n    if (!container) {\n        return;\n    }\n    patchDom(socket, container, html);\n    function buildHtml(template) {\n        var combined = \"\";\n        const fixed = template.f;\n        fixed.forEach((value, i) => {\n            combined = combined.concat(value);\n            if (template.d === undefined) {\n                return;\n            }\n            const templateDyn = template.d[i];\n            if (templateDyn === undefined || templateDyn === null) {\n                return;\n            }\n            if (typeof templateDyn === \"string\") {\n                combined = combined.concat(templateDyn);\n            }\n            else if (\"b\" in templateDyn) {\n                const fixed = templateDyn.f;\n                Object.values(templateDyn.b).forEach((value) => {\n                    const nestedTemplate = { f: fixed, d: value };\n                    combined = combined.concat(buildHtml(nestedTemplate));\n                });\n            }\n            else {\n                combined = combined.concat(buildHtml(templateDyn));\n            }\n        });\n        return combined;\n    }\n    function patchDom(socket, element, html) {\n        for (var i = 0; i < documentEventListeners.length; i++) {\n            let e = documentEventListeners[i];\n            if (!e) {\n                continue;\n            }\n            document.removeEventListener(e.event, e.callback);\n            documentEventListeners.splice(i, 1);\n        }\n        (0, morphdom_1.default)(element, html, {\n            onNodeAdded: (node) => {\n                if (node instanceof Element) {\n                    addEventListeners(socket, node, options);\n                }\n                return node;\n            },\n            onBeforeElUpdated: (fromEl, toEl) => {\n                var _a;\n                if (fromEl instanceof HTMLInputElement && toEl instanceof HTMLInputElement) {\n                    if (toEl.getAttribute(\"type\") === \"radio\" || toEl.getAttribute(\"type\") === \"checkbox\") {\n                        toEl.checked = fromEl.checked;\n                    }\n                    else {\n                        toEl.value = fromEl.value;\n                    }\n                }\n                if (fromEl instanceof HTMLTextAreaElement && toEl instanceof HTMLTextAreaElement) {\n                    toEl.value = fromEl.value;\n                }\n                if (fromEl instanceof HTMLOptionElement && toEl instanceof HTMLOptionElement) {\n                    if ((_a = toEl.closest(\"select\")) === null || _a === void 0 ? void 0 : _a.hasAttribute(\"multiple\")) {\n                        toEl.selected = fromEl.selected;\n                    }\n                }\n                if (fromEl instanceof HTMLSelectElement && toEl instanceof HTMLSelectElement && !toEl.hasAttribute(\"multiple\")) {\n                    toEl.value = fromEl.value;\n                }\n                return true;\n            },\n        });\n        const attrs = Object.values(axm_window).map((attr) => `[${attr}]`).join(\", \");\n        document.querySelectorAll(attrs).forEach((el) => {\n            addDocumentEventListeners(socket, el, options);\n        });\n    }\n}\nfunction patchTemplate(template, diff) {\n    if (diff.f) {\n        template.f = diff.f;\n    }\n    if (diff.d && diff.d !== null) {\n        patchTemplateDiff(template.d || {}, diff.d);\n    }\n    function patchTemplateDiff(template, diff) {\n        for (const [key, diffVal] of Object.entries(diff)) {\n            if (typeof diffVal === \"string\") {\n                template[key] = diffVal;\n            }\n            else if (diffVal === null) {\n                delete template[key];\n            }\n            else if (typeof diffVal === \"object\") {\n                const current = template[key];\n                if (current === undefined) {\n                    continue;\n                }\n                if (\"d\" in diffVal) {\n                    if (typeof current === \"string\") {\n                        template[key] = diffVal;\n                    }\n                    else if (\"d\" in current) {\n                        patchTemplate(current, diffVal);\n                    }\n                    else if (\"b\" in current) {\n                        console.error(\"not implemented: b in current\");\n                    }\n                    else {\n                        template[key] = diffVal;\n                    }\n                }\n                else if (\"b\" in diffVal) {\n                    if (typeof current === \"string\") {\n                        template[key] = diffVal;\n                    }\n                    else {\n                        if (!(\"b\" in current)) {\n                            template[key] = {\n                                f: current.f,\n                                b: diffVal.b\n                            };\n                        }\n                        else {\n                            patchTemplateLoop(current, diffVal);\n                        }\n                    }\n                }\n                else if (\"f\" in diffVal) {\n                    if (typeof current === \"string\") {\n                        template[key] = diffVal;\n                    }\n                    else if (\"d\" in current) {\n                        patchTemplate(current, diffVal);\n                    }\n                    else if (\"b\" in current) {\n                        console.error(\"not implemented: b in current, with f\");\n                    }\n                    else {\n                        template[key] = diffVal;\n                    }\n                }\n                else {\n                    console.error(\"unexpected diff value\", diffVal);\n                }\n            }\n            else {\n                const _ = diffVal;\n            }\n        }\n    }\n    function patchTemplateLoop(template, diff) {\n        if (diff.f) {\n            template.f = diff.f;\n        }\n        if (diff.b) {\n            for (const [key, diffVal] of Object.entries(diff.b)) {\n                if (diffVal === null) {\n                    delete template.b[key];\n                }\n                else {\n                    const current = template.b[key];\n                    if (current === undefined || typeof current === \"string\") {\n                        template.b[key] = diffVal;\n                    }\n                    else {\n                        patchTemplateDiff(current, diffVal);\n                    }\n                }\n            }\n        }\n    }\n}\nfunction handleJsCommand(cmd) {\n    const run = () => {\n        if (cmd.kind.t === \"navigate_to\") {\n            const uri = cmd.kind.uri;\n            if (uri.startsWith(\"http\")) {\n                window.location.href = uri;\n            }\n            else {\n                window.location.pathname = uri;\n            }\n        }\n        else if (cmd.kind.t === \"add_class\") {\n            const { selector, klass } = cmd.kind;\n            document.querySelectorAll(selector).forEach((element) => {\n                element.classList.add(klass);\n            });\n        }\n        else if (cmd.kind.t === \"remove_class\") {\n            const { selector, klass } = cmd.kind;\n            document.querySelectorAll(selector).forEach((element) => {\n                element.classList.remove(klass);\n            });\n        }\n        else if (cmd.kind.t === \"toggle_class\") {\n            const { selector, klass } = cmd.kind;\n            document.querySelectorAll(selector).forEach((element) => {\n                element.classList.toggle(klass);\n            });\n        }\n        else if (cmd.kind.t === \"clear_value\") {\n            const { selector } = cmd.kind;\n            document.querySelectorAll(selector).forEach((element) => {\n                if (element instanceof HTMLInputElement || element instanceof HTMLSelectElement || element instanceof HTMLTextAreaElement) {\n                    element.value = \"\";\n                }\n            });\n        }\n        else if (cmd.kind.t === \"set_title\") {\n            document.title = cmd.kind.title;\n        }\n        else if (cmd.kind.t === \"history_push_state\") {\n            window.history.pushState({}, \"\", cmd.kind.uri);\n        }\n        else {\n            const _ = cmd.kind;\n        }\n    };\n    if (cmd.delay_ms) {\n        setTimeout(run, cmd.delay_ms);\n    }\n    else {\n        run();\n    }\n}\nfunction debounce(f, delayMs) {\n    var timeout;\n    return (...args) => {\n        if (timeout) {\n            clearTimeout(timeout);\n        }\n        timeout = setTimeout(() => {\n            f(...args);\n        }, delayMs);\n    };\n}\nfunction throttle(f, delayMs) {\n    var timeout;\n    return (...args) => {\n        if (timeout) {\n            return;\n        }\n        else {\n            f(...args);\n            timeout = setTimeout(() => {\n                timeout = null;\n            }, delayMs);\n        }\n    };\n}\n//# sourceMappingURL=live_view.js.map\n\n//# sourceURL=webpack:///../assets/dist/src/live_view.js?");

/***/ }),

/***/ "../assets/node_modules/morphdom/dist/morphdom-esm.js":
/*!************************************************************!*\
  !*** ../assets/node_modules/morphdom/dist/morphdom-esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar DOCUMENT_FRAGMENT_NODE = 11;\n\nfunction morphAttrs(fromNode, toNode) {\n    var toNodeAttrs = toNode.attributes;\n    var attr;\n    var attrName;\n    var attrNamespaceURI;\n    var attrValue;\n    var fromValue;\n\n    // document-fragments dont have attributes so lets not do anything\n    if (toNode.nodeType === DOCUMENT_FRAGMENT_NODE || fromNode.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      return;\n    }\n\n    // update attributes on original DOM element\n    for (var i = toNodeAttrs.length - 1; i >= 0; i--) {\n        attr = toNodeAttrs[i];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n        attrValue = attr.value;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n            fromValue = fromNode.getAttributeNS(attrNamespaceURI, attrName);\n\n            if (fromValue !== attrValue) {\n                if (attr.prefix === 'xmlns'){\n                    attrName = attr.name; // It's not allowed to set an attribute with the XMLNS namespace without specifying the `xmlns` prefix\n                }\n                fromNode.setAttributeNS(attrNamespaceURI, attrName, attrValue);\n            }\n        } else {\n            fromValue = fromNode.getAttribute(attrName);\n\n            if (fromValue !== attrValue) {\n                fromNode.setAttribute(attrName, attrValue);\n            }\n        }\n    }\n\n    // Remove any extra attributes found on the original DOM element that\n    // weren't found on the target element.\n    var fromNodeAttrs = fromNode.attributes;\n\n    for (var d = fromNodeAttrs.length - 1; d >= 0; d--) {\n        attr = fromNodeAttrs[d];\n        attrName = attr.name;\n        attrNamespaceURI = attr.namespaceURI;\n\n        if (attrNamespaceURI) {\n            attrName = attr.localName || attrName;\n\n            if (!toNode.hasAttributeNS(attrNamespaceURI, attrName)) {\n                fromNode.removeAttributeNS(attrNamespaceURI, attrName);\n            }\n        } else {\n            if (!toNode.hasAttribute(attrName)) {\n                fromNode.removeAttribute(attrName);\n            }\n        }\n    }\n}\n\nvar range; // Create a range object for efficently rendering strings to elements.\nvar NS_XHTML = 'http://www.w3.org/1999/xhtml';\n\nvar doc = typeof document === 'undefined' ? undefined : document;\nvar HAS_TEMPLATE_SUPPORT = !!doc && 'content' in doc.createElement('template');\nvar HAS_RANGE_SUPPORT = !!doc && doc.createRange && 'createContextualFragment' in doc.createRange();\n\nfunction createFragmentFromTemplate(str) {\n    var template = doc.createElement('template');\n    template.innerHTML = str;\n    return template.content.childNodes[0];\n}\n\nfunction createFragmentFromRange(str) {\n    if (!range) {\n        range = doc.createRange();\n        range.selectNode(doc.body);\n    }\n\n    var fragment = range.createContextualFragment(str);\n    return fragment.childNodes[0];\n}\n\nfunction createFragmentFromWrap(str) {\n    var fragment = doc.createElement('body');\n    fragment.innerHTML = str;\n    return fragment.childNodes[0];\n}\n\n/**\n * This is about the same\n * var html = new DOMParser().parseFromString(str, 'text/html');\n * return html.body.firstChild;\n *\n * @method toElement\n * @param {String} str\n */\nfunction toElement(str) {\n    str = str.trim();\n    if (HAS_TEMPLATE_SUPPORT) {\n      // avoid restrictions on content for things like `<tr><th>Hi</th></tr>` which\n      // createContextualFragment doesn't support\n      // <template> support not available in IE\n      return createFragmentFromTemplate(str);\n    } else if (HAS_RANGE_SUPPORT) {\n      return createFragmentFromRange(str);\n    }\n\n    return createFragmentFromWrap(str);\n}\n\n/**\n * Returns true if two node's names are the same.\n *\n * NOTE: We don't bother checking `namespaceURI` because you will never find two HTML elements with the same\n *       nodeName and different namespace URIs.\n *\n * @param {Element} a\n * @param {Element} b The target element\n * @return {boolean}\n */\nfunction compareNodeNames(fromEl, toEl) {\n    var fromNodeName = fromEl.nodeName;\n    var toNodeName = toEl.nodeName;\n    var fromCodeStart, toCodeStart;\n\n    if (fromNodeName === toNodeName) {\n        return true;\n    }\n\n    fromCodeStart = fromNodeName.charCodeAt(0);\n    toCodeStart = toNodeName.charCodeAt(0);\n\n    // If the target element is a virtual DOM node or SVG node then we may\n    // need to normalize the tag name before comparing. Normal HTML elements that are\n    // in the \"http://www.w3.org/1999/xhtml\"\n    // are converted to upper case\n    if (fromCodeStart <= 90 && toCodeStart >= 97) { // from is upper and to is lower\n        return fromNodeName === toNodeName.toUpperCase();\n    } else if (toCodeStart <= 90 && fromCodeStart >= 97) { // to is upper and from is lower\n        return toNodeName === fromNodeName.toUpperCase();\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create an element, optionally with a known namespace URI.\n *\n * @param {string} name the element name, e.g. 'div' or 'svg'\n * @param {string} [namespaceURI] the element's namespace URI, i.e. the value of\n * its `xmlns` attribute or its inferred namespace.\n *\n * @return {Element}\n */\nfunction createElementNS(name, namespaceURI) {\n    return !namespaceURI || namespaceURI === NS_XHTML ?\n        doc.createElement(name) :\n        doc.createElementNS(namespaceURI, name);\n}\n\n/**\n * Copies the children of one DOM element to another DOM element\n */\nfunction moveChildren(fromEl, toEl) {\n    var curChild = fromEl.firstChild;\n    while (curChild) {\n        var nextChild = curChild.nextSibling;\n        toEl.appendChild(curChild);\n        curChild = nextChild;\n    }\n    return toEl;\n}\n\nfunction syncBooleanAttrProp(fromEl, toEl, name) {\n    if (fromEl[name] !== toEl[name]) {\n        fromEl[name] = toEl[name];\n        if (fromEl[name]) {\n            fromEl.setAttribute(name, '');\n        } else {\n            fromEl.removeAttribute(name);\n        }\n    }\n}\n\nvar specialElHandlers = {\n    OPTION: function(fromEl, toEl) {\n        var parentNode = fromEl.parentNode;\n        if (parentNode) {\n            var parentName = parentNode.nodeName.toUpperCase();\n            if (parentName === 'OPTGROUP') {\n                parentNode = parentNode.parentNode;\n                parentName = parentNode && parentNode.nodeName.toUpperCase();\n            }\n            if (parentName === 'SELECT' && !parentNode.hasAttribute('multiple')) {\n                if (fromEl.hasAttribute('selected') && !toEl.selected) {\n                    // Workaround for MS Edge bug where the 'selected' attribute can only be\n                    // removed if set to a non-empty value:\n                    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/12087679/\n                    fromEl.setAttribute('selected', 'selected');\n                    fromEl.removeAttribute('selected');\n                }\n                // We have to reset select element's selectedIndex to -1, otherwise setting\n                // fromEl.selected using the syncBooleanAttrProp below has no effect.\n                // The correct selectedIndex will be set in the SELECT special handler below.\n                parentNode.selectedIndex = -1;\n            }\n        }\n        syncBooleanAttrProp(fromEl, toEl, 'selected');\n    },\n    /**\n     * The \"value\" attribute is special for the <input> element since it sets\n     * the initial value. Changing the \"value\" attribute without changing the\n     * \"value\" property will have no effect since it is only used to the set the\n     * initial value.  Similar for the \"checked\" attribute, and \"disabled\".\n     */\n    INPUT: function(fromEl, toEl) {\n        syncBooleanAttrProp(fromEl, toEl, 'checked');\n        syncBooleanAttrProp(fromEl, toEl, 'disabled');\n\n        if (fromEl.value !== toEl.value) {\n            fromEl.value = toEl.value;\n        }\n\n        if (!toEl.hasAttribute('value')) {\n            fromEl.removeAttribute('value');\n        }\n    },\n\n    TEXTAREA: function(fromEl, toEl) {\n        var newValue = toEl.value;\n        if (fromEl.value !== newValue) {\n            fromEl.value = newValue;\n        }\n\n        var firstChild = fromEl.firstChild;\n        if (firstChild) {\n            // Needed for IE. Apparently IE sets the placeholder as the\n            // node value and vise versa. This ignores an empty update.\n            var oldValue = firstChild.nodeValue;\n\n            if (oldValue == newValue || (!newValue && oldValue == fromEl.placeholder)) {\n                return;\n            }\n\n            firstChild.nodeValue = newValue;\n        }\n    },\n    SELECT: function(fromEl, toEl) {\n        if (!toEl.hasAttribute('multiple')) {\n            var selectedIndex = -1;\n            var i = 0;\n            // We have to loop through children of fromEl, not toEl since nodes can be moved\n            // from toEl to fromEl directly when morphing.\n            // At the time this special handler is invoked, all children have already been morphed\n            // and appended to / removed from fromEl, so using fromEl here is safe and correct.\n            var curChild = fromEl.firstChild;\n            var optgroup;\n            var nodeName;\n            while(curChild) {\n                nodeName = curChild.nodeName && curChild.nodeName.toUpperCase();\n                if (nodeName === 'OPTGROUP') {\n                    optgroup = curChild;\n                    curChild = optgroup.firstChild;\n                } else {\n                    if (nodeName === 'OPTION') {\n                        if (curChild.hasAttribute('selected')) {\n                            selectedIndex = i;\n                            break;\n                        }\n                        i++;\n                    }\n                    curChild = curChild.nextSibling;\n                    if (!curChild && optgroup) {\n                        curChild = optgroup.nextSibling;\n                        optgroup = null;\n                    }\n                }\n            }\n\n            fromEl.selectedIndex = selectedIndex;\n        }\n    }\n};\n\nvar ELEMENT_NODE = 1;\nvar DOCUMENT_FRAGMENT_NODE$1 = 11;\nvar TEXT_NODE = 3;\nvar COMMENT_NODE = 8;\n\nfunction noop() {}\n\nfunction defaultGetNodeKey(node) {\n  if (node) {\n      return (node.getAttribute && node.getAttribute('id')) || node.id;\n  }\n}\n\nfunction morphdomFactory(morphAttrs) {\n\n    return function morphdom(fromNode, toNode, options) {\n        if (!options) {\n            options = {};\n        }\n\n        if (typeof toNode === 'string') {\n            if (fromNode.nodeName === '#document' || fromNode.nodeName === 'HTML' || fromNode.nodeName === 'BODY') {\n                var toNodeHtml = toNode;\n                toNode = doc.createElement('html');\n                toNode.innerHTML = toNodeHtml;\n            } else {\n                toNode = toElement(toNode);\n            }\n        }\n\n        var getNodeKey = options.getNodeKey || defaultGetNodeKey;\n        var onBeforeNodeAdded = options.onBeforeNodeAdded || noop;\n        var onNodeAdded = options.onNodeAdded || noop;\n        var onBeforeElUpdated = options.onBeforeElUpdated || noop;\n        var onElUpdated = options.onElUpdated || noop;\n        var onBeforeNodeDiscarded = options.onBeforeNodeDiscarded || noop;\n        var onNodeDiscarded = options.onNodeDiscarded || noop;\n        var onBeforeElChildrenUpdated = options.onBeforeElChildrenUpdated || noop;\n        var childrenOnly = options.childrenOnly === true;\n\n        // This object is used as a lookup to quickly find all keyed elements in the original DOM tree.\n        var fromNodesLookup = Object.create(null);\n        var keyedRemovalList = [];\n\n        function addKeyedRemoval(key) {\n            keyedRemovalList.push(key);\n        }\n\n        function walkDiscardedChildNodes(node, skipKeyedNodes) {\n            if (node.nodeType === ELEMENT_NODE) {\n                var curChild = node.firstChild;\n                while (curChild) {\n\n                    var key = undefined;\n\n                    if (skipKeyedNodes && (key = getNodeKey(curChild))) {\n                        // If we are skipping keyed nodes then we add the key\n                        // to a list so that it can be handled at the very end.\n                        addKeyedRemoval(key);\n                    } else {\n                        // Only report the node as discarded if it is not keyed. We do this because\n                        // at the end we loop through all keyed elements that were unmatched\n                        // and then discard them in one final pass.\n                        onNodeDiscarded(curChild);\n                        if (curChild.firstChild) {\n                            walkDiscardedChildNodes(curChild, skipKeyedNodes);\n                        }\n                    }\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        /**\n         * Removes a DOM node out of the original DOM\n         *\n         * @param  {Node} node The node to remove\n         * @param  {Node} parentNode The nodes parent\n         * @param  {Boolean} skipKeyedNodes If true then elements with keys will be skipped and not discarded.\n         * @return {undefined}\n         */\n        function removeNode(node, parentNode, skipKeyedNodes) {\n            if (onBeforeNodeDiscarded(node) === false) {\n                return;\n            }\n\n            if (parentNode) {\n                parentNode.removeChild(node);\n            }\n\n            onNodeDiscarded(node);\n            walkDiscardedChildNodes(node, skipKeyedNodes);\n        }\n\n        // // TreeWalker implementation is no faster, but keeping this around in case this changes in the future\n        // function indexTree(root) {\n        //     var treeWalker = document.createTreeWalker(\n        //         root,\n        //         NodeFilter.SHOW_ELEMENT);\n        //\n        //     var el;\n        //     while((el = treeWalker.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        // // NodeIterator implementation is no faster, but keeping this around in case this changes in the future\n        //\n        // function indexTree(node) {\n        //     var nodeIterator = document.createNodeIterator(node, NodeFilter.SHOW_ELEMENT);\n        //     var el;\n        //     while((el = nodeIterator.nextNode())) {\n        //         var key = getNodeKey(el);\n        //         if (key) {\n        //             fromNodesLookup[key] = el;\n        //         }\n        //     }\n        // }\n\n        function indexTree(node) {\n            if (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE$1) {\n                var curChild = node.firstChild;\n                while (curChild) {\n                    var key = getNodeKey(curChild);\n                    if (key) {\n                        fromNodesLookup[key] = curChild;\n                    }\n\n                    // Walk recursively\n                    indexTree(curChild);\n\n                    curChild = curChild.nextSibling;\n                }\n            }\n        }\n\n        indexTree(fromNode);\n\n        function handleNodeAdded(el) {\n            onNodeAdded(el);\n\n            var curChild = el.firstChild;\n            while (curChild) {\n                var nextSibling = curChild.nextSibling;\n\n                var key = getNodeKey(curChild);\n                if (key) {\n                    var unmatchedFromEl = fromNodesLookup[key];\n                    // if we find a duplicate #id node in cache, replace `el` with cache value\n                    // and morph it to the child node.\n                    if (unmatchedFromEl && compareNodeNames(curChild, unmatchedFromEl)) {\n                        curChild.parentNode.replaceChild(unmatchedFromEl, curChild);\n                        morphEl(unmatchedFromEl, curChild);\n                    } else {\n                      handleNodeAdded(curChild);\n                    }\n                } else {\n                  // recursively call for curChild and it's children to see if we find something in\n                  // fromNodesLookup\n                  handleNodeAdded(curChild);\n                }\n\n                curChild = nextSibling;\n            }\n        }\n\n        function cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey) {\n            // We have processed all of the \"to nodes\". If curFromNodeChild is\n            // non-null then we still have some from nodes left over that need\n            // to be removed\n            while (curFromNodeChild) {\n                var fromNextSibling = curFromNodeChild.nextSibling;\n                if ((curFromNodeKey = getNodeKey(curFromNodeChild))) {\n                    // Since the node is keyed it might be matched up later so we defer\n                    // the actual removal to later\n                    addKeyedRemoval(curFromNodeKey);\n                } else {\n                    // NOTE: we skip nested keyed nodes from being removed since there is\n                    //       still a chance they will be matched up later\n                    removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                }\n                curFromNodeChild = fromNextSibling;\n            }\n        }\n\n        function morphEl(fromEl, toEl, childrenOnly) {\n            var toElKey = getNodeKey(toEl);\n\n            if (toElKey) {\n                // If an element with an ID is being morphed then it will be in the final\n                // DOM so clear it out of the saved elements collection\n                delete fromNodesLookup[toElKey];\n            }\n\n            if (!childrenOnly) {\n                // optional\n                if (onBeforeElUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n\n                // update attributes on original DOM element first\n                morphAttrs(fromEl, toEl);\n                // optional\n                onElUpdated(fromEl);\n\n                if (onBeforeElChildrenUpdated(fromEl, toEl) === false) {\n                    return;\n                }\n            }\n\n            if (fromEl.nodeName !== 'TEXTAREA') {\n              morphChildren(fromEl, toEl);\n            } else {\n              specialElHandlers.TEXTAREA(fromEl, toEl);\n            }\n        }\n\n        function morphChildren(fromEl, toEl) {\n            var curToNodeChild = toEl.firstChild;\n            var curFromNodeChild = fromEl.firstChild;\n            var curToNodeKey;\n            var curFromNodeKey;\n\n            var fromNextSibling;\n            var toNextSibling;\n            var matchingFromEl;\n\n            // walk the children\n            outer: while (curToNodeChild) {\n                toNextSibling = curToNodeChild.nextSibling;\n                curToNodeKey = getNodeKey(curToNodeChild);\n\n                // walk the fromNode children all the way through\n                while (curFromNodeChild) {\n                    fromNextSibling = curFromNodeChild.nextSibling;\n\n                    if (curToNodeChild.isSameNode && curToNodeChild.isSameNode(curFromNodeChild)) {\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    curFromNodeKey = getNodeKey(curFromNodeChild);\n\n                    var curFromNodeType = curFromNodeChild.nodeType;\n\n                    // this means if the curFromNodeChild doesnt have a match with the curToNodeChild\n                    var isCompatible = undefined;\n\n                    if (curFromNodeType === curToNodeChild.nodeType) {\n                        if (curFromNodeType === ELEMENT_NODE) {\n                            // Both nodes being compared are Element nodes\n\n                            if (curToNodeKey) {\n                                // The target node has a key so we want to match it up with the correct element\n                                // in the original DOM tree\n                                if (curToNodeKey !== curFromNodeKey) {\n                                    // The current element in the original DOM tree does not have a matching key so\n                                    // let's check our lookup to see if there is a matching element in the original\n                                    // DOM tree\n                                    if ((matchingFromEl = fromNodesLookup[curToNodeKey])) {\n                                        if (fromNextSibling === matchingFromEl) {\n                                            // Special case for single element removals. To avoid removing the original\n                                            // DOM node out of the tree (since that can break CSS transitions, etc.),\n                                            // we will instead discard the current node and wait until the next\n                                            // iteration to properly match up the keyed target element with its matching\n                                            // element in the original tree\n                                            isCompatible = false;\n                                        } else {\n                                            // We found a matching keyed element somewhere in the original DOM tree.\n                                            // Let's move the original DOM node into the current position and morph\n                                            // it.\n\n                                            // NOTE: We use insertBefore instead of replaceChild because we want to go through\n                                            // the `removeNode()` function for the node that is being discarded so that\n                                            // all lifecycle hooks are correctly invoked\n                                            fromEl.insertBefore(matchingFromEl, curFromNodeChild);\n\n                                            // fromNextSibling = curFromNodeChild.nextSibling;\n\n                                            if (curFromNodeKey) {\n                                                // Since the node is keyed it might be matched up later so we defer\n                                                // the actual removal to later\n                                                addKeyedRemoval(curFromNodeKey);\n                                            } else {\n                                                // NOTE: we skip nested keyed nodes from being removed since there is\n                                                //       still a chance they will be matched up later\n                                                removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                                            }\n\n                                            curFromNodeChild = matchingFromEl;\n                                        }\n                                    } else {\n                                        // The nodes are not compatible since the \"to\" node has a key and there\n                                        // is no matching keyed node in the source tree\n                                        isCompatible = false;\n                                    }\n                                }\n                            } else if (curFromNodeKey) {\n                                // The original has a key\n                                isCompatible = false;\n                            }\n\n                            isCompatible = isCompatible !== false && compareNodeNames(curFromNodeChild, curToNodeChild);\n                            if (isCompatible) {\n                                // We found compatible DOM elements so transform\n                                // the current \"from\" node to match the current\n                                // target DOM node.\n                                // MORPH\n                                morphEl(curFromNodeChild, curToNodeChild);\n                            }\n\n                        } else if (curFromNodeType === TEXT_NODE || curFromNodeType == COMMENT_NODE) {\n                            // Both nodes being compared are Text or Comment nodes\n                            isCompatible = true;\n                            // Simply update nodeValue on the original node to\n                            // change the text value\n                            if (curFromNodeChild.nodeValue !== curToNodeChild.nodeValue) {\n                                curFromNodeChild.nodeValue = curToNodeChild.nodeValue;\n                            }\n\n                        }\n                    }\n\n                    if (isCompatible) {\n                        // Advance both the \"to\" child and the \"from\" child since we found a match\n                        // Nothing else to do as we already recursively called morphChildren above\n                        curToNodeChild = toNextSibling;\n                        curFromNodeChild = fromNextSibling;\n                        continue outer;\n                    }\n\n                    // No compatible match so remove the old node from the DOM and continue trying to find a\n                    // match in the original DOM. However, we only do this if the from node is not keyed\n                    // since it is possible that a keyed node might match up with a node somewhere else in the\n                    // target tree and we don't want to discard it just yet since it still might find a\n                    // home in the final DOM tree. After everything is done we will remove any keyed nodes\n                    // that didn't find a home\n                    if (curFromNodeKey) {\n                        // Since the node is keyed it might be matched up later so we defer\n                        // the actual removal to later\n                        addKeyedRemoval(curFromNodeKey);\n                    } else {\n                        // NOTE: we skip nested keyed nodes from being removed since there is\n                        //       still a chance they will be matched up later\n                        removeNode(curFromNodeChild, fromEl, true /* skip keyed nodes */);\n                    }\n\n                    curFromNodeChild = fromNextSibling;\n                } // END: while(curFromNodeChild) {}\n\n                // If we got this far then we did not find a candidate match for\n                // our \"to node\" and we exhausted all of the children \"from\"\n                // nodes. Therefore, we will just append the current \"to\" node\n                // to the end\n                if (curToNodeKey && (matchingFromEl = fromNodesLookup[curToNodeKey]) && compareNodeNames(matchingFromEl, curToNodeChild)) {\n                    fromEl.appendChild(matchingFromEl);\n                    // MORPH\n                    morphEl(matchingFromEl, curToNodeChild);\n                } else {\n                    var onBeforeNodeAddedResult = onBeforeNodeAdded(curToNodeChild);\n                    if (onBeforeNodeAddedResult !== false) {\n                        if (onBeforeNodeAddedResult) {\n                            curToNodeChild = onBeforeNodeAddedResult;\n                        }\n\n                        if (curToNodeChild.actualize) {\n                            curToNodeChild = curToNodeChild.actualize(fromEl.ownerDocument || doc);\n                        }\n                        fromEl.appendChild(curToNodeChild);\n                        handleNodeAdded(curToNodeChild);\n                    }\n                }\n\n                curToNodeChild = toNextSibling;\n                curFromNodeChild = fromNextSibling;\n            }\n\n            cleanupFromEl(fromEl, curFromNodeChild, curFromNodeKey);\n\n            var specialElHandler = specialElHandlers[fromEl.nodeName];\n            if (specialElHandler) {\n                specialElHandler(fromEl, toEl);\n            }\n        } // END: morphChildren(...)\n\n        var morphedNode = fromNode;\n        var morphedNodeType = morphedNode.nodeType;\n        var toNodeType = toNode.nodeType;\n\n        if (!childrenOnly) {\n            // Handle the case where we are given two DOM nodes that are not\n            // compatible (e.g. <div> --> <span> or <div> --> TEXT)\n            if (morphedNodeType === ELEMENT_NODE) {\n                if (toNodeType === ELEMENT_NODE) {\n                    if (!compareNodeNames(fromNode, toNode)) {\n                        onNodeDiscarded(fromNode);\n                        morphedNode = moveChildren(fromNode, createElementNS(toNode.nodeName, toNode.namespaceURI));\n                    }\n                } else {\n                    // Going from an element node to a text node\n                    morphedNode = toNode;\n                }\n            } else if (morphedNodeType === TEXT_NODE || morphedNodeType === COMMENT_NODE) { // Text or comment node\n                if (toNodeType === morphedNodeType) {\n                    if (morphedNode.nodeValue !== toNode.nodeValue) {\n                        morphedNode.nodeValue = toNode.nodeValue;\n                    }\n\n                    return morphedNode;\n                } else {\n                    // Text node to something else\n                    morphedNode = toNode;\n                }\n            }\n        }\n\n        if (morphedNode === toNode) {\n            // The \"to node\" was not compatible with the \"from node\" so we had to\n            // toss out the \"from node\" and use the \"to node\"\n            onNodeDiscarded(fromNode);\n        } else {\n            if (toNode.isSameNode && toNode.isSameNode(morphedNode)) {\n                return;\n            }\n\n            morphEl(morphedNode, toNode, childrenOnly);\n\n            // We now need to loop over any keyed nodes that might need to be\n            // removed. We only do the removal if we know that the keyed node\n            // never found a match. When a keyed node is matched up we remove\n            // it out of fromNodesLookup and we use fromNodesLookup to determine\n            // if a keyed node has been matched up or not\n            if (keyedRemovalList) {\n                for (var i=0, len=keyedRemovalList.length; i<len; i++) {\n                    var elToRemove = fromNodesLookup[keyedRemovalList[i]];\n                    if (elToRemove) {\n                        removeNode(elToRemove, elToRemove.parentNode, false);\n                    }\n                }\n            }\n        }\n\n        if (!childrenOnly && morphedNode !== fromNode && fromNode.parentNode) {\n            if (morphedNode.actualize) {\n                morphedNode = morphedNode.actualize(fromNode.ownerDocument || doc);\n            }\n            // If we had to swap out the from node with a new node because the old\n            // node was not compatible with the target node then we need to\n            // replace the old DOM node in the original DOM tree. This is only\n            // possible if the original DOM node was part of a DOM tree which\n            // we know is the case if it has a parent node.\n            fromNode.parentNode.replaceChild(morphedNode, fromNode);\n        }\n\n        return morphedNode;\n    };\n}\n\nvar morphdom = morphdomFactory(morphAttrs);\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (morphdom);\n\n\n//# sourceURL=webpack:///../assets/node_modules/morphdom/dist/morphdom-esm.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./index.js");
/******/ 	
/******/ })()
;